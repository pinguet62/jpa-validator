package fr.pinguet62.jpavalidator.cases.id;

import static fr.pinguet62.jpavalidator.util.TestUtils.assertErrorWithColumn;
import static fr.pinguet62.jpavalidator.util.TestUtils.runCheck;
import static javax.persistence.GenerationType.IDENTITY;
import static org.junit.Assert.fail;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.Table;

import org.junit.Test;
import org.junit.runner.RunWith;

import fr.pinguet62.jpavalidator.exception.ValidationException;
import fr.pinguet62.jpavalidator.util.runner.SchemaRunner;
import fr.pinguet62.jpavalidator.util.runner.Script;

@RunWith(SchemaRunner.class)
public class IdentityGeneratedIdTest {

    @Entity
    @Table(name = "SAMPLE")
    static class Sample {
        @Id
        @GeneratedValue(strategy = IDENTITY)
        @Column(name = "PK", nullable = true)
        Integer id;
    }

    @Test
    @Script("create table SAMPLE ( PK int generated by default as identity primary key );")
    public void test() {
        runCheck(Sample.class);
    }

    @Test
    @Script("create table SAMPLE ( PK int primary key );")
    public void test_generatedAs_not_invalid() {
        try {
            runCheck(Sample.class);
            fail();
        } catch (ValidationException e) {
            assertErrorWithColumn(e, Sample.class, "SAMPLE", "PK");
        }
    }

    @Test
    @Script({ "create sequence SAMPLE_SEQUENCE;", //
            "create table SAMPLE ( PK int generated by default as sequence SAMPLE_SEQUENCE primary key );" })
    public void test_generatedAs_sequence_invalid() {
        try {
            runCheck(Sample.class);
            fail();
        } catch (ValidationException e) {
            assertErrorWithColumn(e, Sample.class, "SAMPLE", "PK");
        }
    }

}