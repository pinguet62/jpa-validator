package fr.pinguet62.jpavalidator.cases.id;

import static fr.pinguet62.jpavalidator.util.TestUtils.assertErrorWithColumn;
import static fr.pinguet62.jpavalidator.util.TestUtils.runCheck;
import static javax.persistence.GenerationType.IDENTITY;
import static javax.persistence.GenerationType.SEQUENCE;
import static org.junit.Assert.fail;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

import org.junit.Test;

import fr.pinguet62.jpavalidator.ValidationException;
import fr.pinguet62.jpavalidator.util.runner.Script;

public class GeneratedIdTest {

    @Test
    @Script("create table SAMPLE ( PK int generated by default as identity primary key );")
    public void test_nullable_generatedAs_identity_invalid() {
        @Entity
        @Table(name = "SAMPLE")
        class IdentityNotNullable {
            @Id
            @GeneratedValue(strategy = IDENTITY)
            @Column(name = "PK", nullable = false)
            int id;
        }

        try {
            runCheck(IdentityNotNullable.class);
            fail();
        } catch (ValidationException e) {
            assertErrorWithColumn(e, IdentityNotNullable.class, "SAMPLE", "PK");
        }
    }

    @Test
    @Script({ "create sequence SAMPLE_SEQUENCE;", //
            "create table SAMPLE ( PK int generated by default as sequence SAMPLE_SEQUENCE primary key );" })
    public void test_nullable_generatedAs_sequence_invalid() {
        @Entity
        @Table(name = "SAMPLE")
        class SequenceNotNullable {
            @Id
            @GeneratedValue(strategy = SEQUENCE, generator = "gen")
            @SequenceGenerator(name = "gen", sequenceName = "SAMPLE_SEQUENCE")
            @Column(name = "PK", nullable = false)
            int id;
        }

        try {
            runCheck(SequenceNotNullable.class);
            fail();
        } catch (ValidationException e) {
            assertErrorWithColumn(e, SequenceNotNullable.class, "SAMPLE", "PK");
        }
    }

}