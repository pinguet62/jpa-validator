package fr.pinguet62.jpavalidator.validator.id;

import static java.lang.String.format;
import static java.util.Arrays.asList;
import static javax.persistence.GenerationType.SEQUENCE;

import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.util.Collection;

import javax.persistence.Column;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;

import fr.pinguet62.jpavalidator.checker.JdbcMetadataChecker;
import fr.pinguet62.jpavalidator.validator.AbstractValidator;

public class SequenceGeneratedIdValidator extends AbstractValidator {

    public SequenceGeneratedIdValidator(Class<?> entity, String tableName) {
        super(entity, tableName);
    }

    @Override
    protected boolean doProcess(Field field) {
        Column column = field.getDeclaredAnnotation(Column.class);
        String columnName = column.name();

        // PK
        if (!JdbcMetadataChecker.INSTANCE.checkPrimaryKey(tableName, columnName)) {
            throwError(format("column is not an PK: %s.%s", tableName, columnName));
            return false;
        }

        String generator = field.getDeclaredAnnotation(GeneratedValue.class).generator();
        SequenceGenerator sequenceGenerator = field.getDeclaredAnnotation(SequenceGenerator.class);
        String sequenceName = sequenceGenerator.sequenceName();

        // Generator: same key
        if (!generator.equals(sequenceGenerator.name())) {
            throwError("@" + GeneratedValue.class.getSimpleName() + "(generator) and @"
                    + SequenceGenerator.class.getSimpleName() + "(name) doesn't match");
            return false;
        }

        // Sequence: exists
        if (!JdbcMetadataChecker.INSTANCE.checkSequence(sequenceName)) {
            throwError(format("sequence doesn't exists: %s", sequenceName));
            return false;
        }

        // Auto-increment
        if (!JdbcMetadataChecker.INSTANCE.checkAutoIncrement(tableName, columnName, true)) {
            throwError(format("column is not 'auto-increment': %s.%s", tableName, columnName));
            return false;
        }

        // Auto-increment: generated by: sequence
        if (!JdbcMetadataChecker.INSTANCE.checkAutoIncrementBySequence(tableName, columnName, sequenceName)) {
            throwError(
                    format("column is not 'generated as sequence': %s.%s & sequenceName", tableName, columnName, sequenceName));
            return false;
        }

        return true;
    }

    @Override
    public Collection<Class<? extends Annotation>> getSupportedAnnotations() {
        return asList(Id.class, Column.class, GeneratedValue.class, SequenceGenerator.class);
    }

    @Override
    public boolean support(Field field) {
        return field.isAnnotationPresent(Id.class) && field.isAnnotationPresent(GeneratedValue.class)
                && field.getDeclaredAnnotation(GeneratedValue.class).strategy().equals(SEQUENCE)
                && field.isAnnotationPresent(SequenceGenerator.class);
    }

}